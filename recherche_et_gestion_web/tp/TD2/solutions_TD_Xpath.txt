http://www.freeformatter.com/xpath-tester.html

De bons exemples et un outil pour faire des requetes Xpath

/child::biographie/*[text()]
===========================
        Livres
===========================
1. Titre de tous les livres 
	/livres/livre/titre/text()
	//livre/text()
	//titre/text()

2.Les livres achetés en 2004
	//livre[@achat="2004"]/titre/text()

3.La postface du livre Orlando
	//livre[titre[text()="Orlando"]]/postface/text()
	//livre/titre[contains(text(),"Orlando")]/parent::node()/postface/text()

4.Titre des livres où Yourcenar est référencée
	//livre[traduction/nom[contains(text(),"Yourcenar")]]/titre/text() --- ne donne que dans le cas où Yourcenar est traducteur ---
	//titre[../descendant::node()[contains(text(),"Yourcenar")]]/text()

5. Titre des livres où Marguerite Yourcenar est référencée
	//titre[../descendant::node()[contains(text(),"Yourcenar")] and ../descendant::node()[contains(text(),"Marguerite")]]/text()
	//livre[traduction/nom[contains(text(),"Yourcenar")] and prenom[contains(text(),"Marguerite")]]/titre/text() --- ne donne que dans le cas où Yourcenar est traducteur ---

6. Les titres des livres qui ont une postface
	//livre[postface]/titre

7. Les titres des livres qui n’ont pas de postface
	//livre[not(postface)]/titre

8. Les livres achetés il y a plus de 10 ans
	//livre[@achat<"2004"]/titre/text()

9. Quel est le titre du dernier livre du document
	//livre[position()=last()]/titre/text()

10. Quel est le titre du livre qui précède immédiatement Les vagues
	//livre/titre[contains(text(),"Vagues")]/following::node()/titre/text()

11. Qui a écrit Orlando
	/livres/auteur[@id=//livres/livre[titre[text()="Orlando"]]/@ref]/child::node()/text()
	/livres/auteur[@id=//livres/livre[titre[contains(text(),"Orlando")]]/@ref]/child::node()/text()

	//auteur[@id=//livre[contains(titre,"Orlando")]/@ref]/*/text()

12. Le titre des livres écrit par Denis Lehane
	/livres/livre[@ref=/livres/auteur[contains(prenom,"Denis") and contains(nom,"Lehane")]/@id]/titre/text()

13. Le titre des livres qui contiennent ‘on’
	/livres/livre[@ref=/livres/auteur[contains(prenom,"Denis") and contains(nom,"Lehane")]/@id]/titre[contains(text(),"on")]/text()

14. Les nœuds qui ont deux descendants
	//node()[count(descendant::node())>=2]
	//node()[count(ancestor::node())>=2]

	//*[count (ancestor::*)=2]/*

15. Les nœuds dont le nom contient la chaîne ‘it’
	//node()[contains(name(),"it")]

===========================
        Biographie
===========================
1. Les titres de tous les livres
	/biographie/livre/titre/text()
	//livre/titre/text()

2. Les titres de tous les films
	/biographie/titre/text()

3. Tous les acteurs référencés dans la biographie
	//acteur/text()

4. Tous les réalisateurs références dans la biographie
	//realisateur/text()

5. Tous les livres référencés
	//livre/titre/text()

6. Tous les noeuds qui ne sont pas du texte
	//descendant::node()[text()]

7. Les nœuds de deuxième niveau

8. Le dernier acteur référencé
	//acteur[last()]
